40image.c - implemented functionality for taking arguments and
            commands from standard input and the command line, as well as
            calling the main functionality for compression and decompression.

40image.h - defines various structs and declared various functions
            used for both compression and decompression, including cvsPix,
            info2x2, info2x2dq, and lsbInfo objects (described below), and
            functions utilized for pixel-value conversion, quantization/
            dequantization, and bit-packing/unpacking.

compress40.c - implemented main functionality for compression and
               decompression mechanisms, which calls various functions defined
               in linked files to complete pixel/pixel-neighborhood-value
               conversion, quantization/dequantization, and bit-
               packing/unpacking. Also frees memory, and reads in and writes
               out Pnm_ppm images, allowing for communication between
               different commands on the command line

quantize.c - maps through the original image to first convert each
             rgb pixel to component video, then calculate the a, b, c, d, avg
             Pb and avg Pr values of each 2x2 block of component video pixels.
             These values are then quantized using quantization functions.

pack.c - stores each struct of quantized a, b, c, d, avg Pb and avg
         Pr values in a uint64_t using the bitpacking functions declared in
         bitpack.h. Prints the first 32 bits of each word to stdout so that
         the most significant character (8 bits) of those 32 appears first.

unpack.c - gets words by reading in four characters at a time from
           the input file, and storing them in a uint64_t word using the
           bitpacking functions. The a, b, c, d avg Pb and avg Pr values are
           then unpacked from These words and stored in a UArray2_T of structs
           with dimensions equal to half the size of the original image.

dequantize.c - maps through all the structs in the UArray2_T,
               dequantizes each value, converts each struct to its four
               corresponding rgb pixels, and then stores these pixels in a
               UArray2_T of Pnm_rgb objects.

bitpack.c - defines the bitpacking functions from bitpack.h,
            including functions to check whether a given number can fit in a
            given width, functions to access the values in a specified field
            of bits, and functions to update the values within a specified
            field of bits.
